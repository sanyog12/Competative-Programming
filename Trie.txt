/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */

class TrieNode{
    public:
        TrieNode* links[26];
        bool isTerminal=false;
        bool contains(char ch){
            return (links[ch - 'a']!=NULL);
        }
        void put(char ch,TrieNode* node){
            links[ch-'a'] = node;
        }
        TrieNode* get(char ch){
            return links[ch - 'a'];
        }
        bool setEnd(){
            isTerminal = true;
        }
        bool isEnd(){
            return isTerminal;
        }
};

class Trie {
    private:
        TrieNode* root;
public:

    /** Initialize your data structure here. */
    Trie() {
        root = new TrieNode();
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode* node = root;
        for(int i=0;i<word.length();i++){
            if(!node->contains(word[i])){
                node->put(word[i],new TrieNode());
            }
            node=node->get(word[i]);
        }
        node->setEnd();
    }

    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode* node=  root;
        for(int i=0;i<word.length();i++){
            if(!node->contains(word[i])){
                return false;
            }
            node = node->get(word[i]);
        }
        return node->isEnd();
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string word) {
        TrieNode* node=  root;
        for(int i=0;i<word.length();i++){
            if(!node->contains(word[i])){
                return false;
            }
            node = node->get(word[i]);
        }
        return true;
    }
};